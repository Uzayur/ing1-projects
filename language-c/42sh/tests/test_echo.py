from subprocess import PIPE, run
import os
import subprocess
import unittest

"""
def test_global_(self):
        salida1 = subprocess.run("builddir/42sh -c \"\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
"""

class TestEcho(unittest.TestCase):

    def test_global_echo(self):
        salida1 = subprocess.run("builddir/42sh -c \"echo a\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("echo a", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"echo 'dffffffffffffffffffffffffffffffffffffffffffffffff echo ok'; echo ko\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("echo 'dffffffffffffffffffffffffffffffffffffffffffffffff echo ok'; echo ko", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"echo e     ed f   g s   a   re g      a gf    a f     v  a  f   d  f      g  a   a fg\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("echo e     ed f   g s   a   re g      a gf    a f     v  a  f   d  f      g  a   a fg", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"echo -e '\t' '\n'; echo wtf ca marche; echo; echo -n sans fi then newline ?\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("echo -e '\t' '\n'; echo wtf ca marche; echo; echo -n sans fi then newline ?", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"echo -n echo a; echo normALEnt ca marche \"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("echo -n echo a; echo normALEnt ca marche ", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"echo -e -e -e -n -n -e -n salut je suis '\n' a la ligne normalement, mais pas a la fin... while ?\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("echo -e -e -e -n -n -e -n salut je suis '\n' a la ligne normalement, mais pas a la fin... while ?", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"echo normalenemt -E est print\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("echo normalenemt -E est print", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"echo -e\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("echo -e", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"echo '\t'\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("echo '\t'", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"echo -N -E -f -p -o test with wrong options\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("echo -N -E -f -p -o test with wrong options", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"echo -e im a      test    with     random '\t'\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("echo -e im a      test    with     random '\t'", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"echo je suis -n le dernier test;echo until then if\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("echo je suis -n le dernier test; echo until then if", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"echo -e -n -e -n;\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("echo -e -n -e -n;", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"echo -en\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("echo -en", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"echo\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("echo", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"echo -ne je suis '\t' la ? '\n' en vrai jsp\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("echo -ne je suis '\t' la ? '\n' en vrai jsp", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"echo -ne je suis '\t' la ? '\n' en vrai jsp; echo; echo -e -e -n -ne -g\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("echo -ne je suis '\t' la ? '\n' en vrai jsp; echo; echo -e -e -n -ne -g", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)

    def test_global_quote(self):
        salida1 = subprocess.run("builddir/42sh -c \"echo ok'ko'\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("echo ok'ko'", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"echo 'ko'ok; echo foobar\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("echo 'ko'ok; echo foobar", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"echo 'okokokok                     ';echo ko; echo foobar\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("echo 'okokokok                     ';echo ko; echo foobar", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"if echo ok; then echo foobar; fi\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("if echo ok; then echo foobar; fi", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)

    def test_global_if(self):
        salida1 = subprocess.run("builddir/42sh -c \"if echo ok; then echo foobar; elif echo ko; then echo gu; fi\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("if echo ok; then echo foobar; elif echo ko; then echo gu; fi", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"if echo OK; then echo KO; else if echo KOKO; then echo OKOK;fi;fi\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("if echo OK; then echo KO; else if echo KOKO; then echo OKOK;fi;fi", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"if if echo ok; then echo foobar; fi; then echo KO; else echo ok;fi\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("if if echo ok; then echo foobar; fi; then echo KO; else echo ok;fi", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"if echo ok; echo foo; echo bar; then echo OK; fi\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("if echo ok; echo foo; echo bar; then echo OK; fi", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"if echo ok; then if echo KO; then echo FOOBAR;fi; elif echo ok; then echo je viens de corriger ce test 'plutot hiant non?';fi\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("if echo ok; then if echo KO; then echo FOOBAR;fi; elif echo ok; then echo on ne peut pas faire de cas derreur ? relou; fi", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"if echo ok; then if echo ok; then echo FOOBAR;fi ; echo a; if echo a; then echo ok; fi; else echo gou; fi\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("if echo ok; then if echo ok; then echo FOOBAR;fi ; echo a; if echo a; then echo ok; fi; else echo gou; fi", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"if echo ok; echo ok; echo ok echo ok echo ok; if echo POP; then echo SALUT; fi; then echo THAT OK; fi\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("if echo ok; echo ok; echo ok echo ok echo ok; if echo POP; then echo SALUT; fi; then echo THAT OK; fi", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"echo JE SUIS TILT; if echo lol; then echo suuuu; fi\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("echo JE SUIS TILT; if echo lol; then echo suuuu; fi", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"echo Maybe i should just stop ?; if echo KO; then echo echo; fi\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("echo Maybe i should just stop ?; if echo KO; then echo echo; fi", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"echo jesuisunmotcollemaiscestjustpourtester'quotepourfairenimp'; echo tkt cest gerer\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("echo jesuisunmotcollemaiscestjustpourtester'quotepourfairenimp'; echo tkt cest gerer", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"if if echo ok; echo in; then echo ko;fi; if echo GOU; then echo FOOBAR;fi; then echo je suis un mega test; fi\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("if if echo ok; echo in; then echo ko;fi; if echo GOU; then echo FOOBAR;fi; then echo je suis un mega test; fi", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"if echo franchement je ne sais plus quoi mettre; echo je continue quand meme; then if echo ok; then echo salut; echo ju; then echo bot; fi; fi\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("if echo franchement je ne sais plus quoi mettre; echo je continue quand meme; then if echo ok; then echo salut; echo ju; then echo tom; fi; fi", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"if if if echo ok; then echo salut;fi ; then echo je suis le deuxieme; fi; then echo je suis le last one; fi\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("if if if echo ok; then echo salut;fi ; then echo je suis le deuxieme; fi; then echo je suis le last one; fi", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"echo salut je suis ubn petit test qui devient if for tres grand then else test vraiment tres grabd; if echo KO; thehn echo SALUT; fi\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("echo salut je suis ubn petit test qui devient if for tres grand then else test vraiment tres grabd; if echo KO; thehn echo SALUT; fi", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"if echo ok; then if echo KO; then echo FOOBAR;; elif echo ok; then echo je viens de corriger ce test 'plutot hiant non?';fi\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("if echo ok; then if echo KO; then echo FOOBAR;; elif echo ok; then echo on ne peut pas faire de cas derreur ? relou; fi", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)

    def test_global_and_or(self):
        salida1 = subprocess.run("builddir/42sh -c \"echo ok || echo ko && echo je suis un test || echo pourquoi pas ?\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("echo ok || echo ko && echo je suis un test || echo pourquoi pas ?", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"echo ok && echo basique test\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("echo ok && echo basique test", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"echo ok || echo ko\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("echo ok || echo ko", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"echo je suis la || echo je suis pas la && echo je suis present\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("echo je suis la || echo je suis pas la && echo je suis present", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"if echo ok; then echo ko;fi; echo SUUUUU || echo KO; echo yes\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("if echo ok; then echo ko;fi; echo SUUUUU || echo KO; echo yes", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"until echo ok; do; echo OK;done || echo wow\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("until echo ok; do; echo OK;done || echo wow", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"echo je suis la || echo pas moi || echo pas moi non plus && echo je suis lA\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("echo je suis la || echo pas moi || echo pas moi non plus && echo je suis lA", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"echo yes sur && echo SUPER; if echo ko; then echo ok || echo super; else echo wtf; fi\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("echo yes sur && echo SUPER; if echo ko; then echo ok || echo super; else echo wtf; fi", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"if echo ok || echo YES; then until echo super; do echo seulet unique fois; done; fi\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("if echo ok || echo YES; then until echo super; do echo seulet unique fois; done; fi", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"echo je suis la && echo moi aussi '           ' || echo usper\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("echo je suis la && echo moi aussi '           ' || echo usper", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"if echo ok; then echo super; fi || if echo OK; then echo OK; else echo bah nan; fi\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("if echo ok; then echo super; fi || if echo OK; then echo OK; else echo bah nan; fi", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"echo tar.gz || echo epita && echo super || echo ez && echo luffy || echo jen ai marre && echo dalterne\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("echo tar.gz || echo epita && echo super || echo ez && echo luffy || echo jen ai marre && echo dalterne", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"echo && echo  super\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("echo && echo  super", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)

    def test_global_pipe(self):
        salida1 = subprocess.run("builddir/42sh -c \"echo ok | echo ko || echo c | echo d\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("echo ok | echo ko || echo c | echo d", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)

    def test_global_neg(self):
        salida1 = subprocess.run("builddir/42sh -c \"! echo ok || echo ko && ! echo je suis un test || echo pourquoi pas ?\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("! echo ok || echo ko && ! echo je suis un test || ! echo pourquoi pas ?", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"echo ok && echo basique test; ! echo ok\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("echo ok && echo basique test; ! echo ok", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"echo ok || ! echo ko\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("echo ok || ! echo ko", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"echo je suis la || ! echo je suis pas la && echo je suis present\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("echo je suis la || ! echo je suis pas la && echo je suis present", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"if echo ok; then echo ko;fi; ! echo SUUUUU || echo KO; echo yes\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("if echo ok; then echo ko;fi; ! echo SUUUUU || ! echo KO; echo yes", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"! until echo ok; do; echo OK;done || echo wow\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("! until echo ok; do; echo OK;done || echo wow", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"! echo je suis la || echo pas moi || echo pas moi non plus && echo je suis lA\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("! echo je suis la || echo pas moi || echo pas moi non plus && echo je suis lA", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"echo yes sur && echo SUPER; if echo ko; then ! echo ok || echo super; else echo wtf; fi\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("echo yes sur && echo SUPER; if echo ko; then ! echo ok || echo super; else echo wtf; fi", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"if echo ok || echo YES; then until echo super; do echo seulet unique fois; done; fi; ! echo ok\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("if echo ok || echo YES; then until echo super; do echo seulet unique fois; done; fi; ! echo ok", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"echo je suis la && ! echo moi aussi '           ' || echo usper\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("echo je suis la && ! echo moi aussi '           ' || echo usper", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"if echo ok; then echo super; fi || if echo OK; then echo OK; else ! echo bah nan; fi\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("if echo ok; then echo super; fi || if echo OK; then echo OK; else ! echo bah nan; fi", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"echo tar.gz || echo epita && echo super || ! echo ez && echo luffy || echo jen ai marre && echo dalterne\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("echo tar.gz || echo epita && echo super || ! echo ez && echo luffy || echo jen ai marre && echo dalterne", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"! echo && echo  super\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("! echo && echo  super", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)

    def test_global_exit(self):
        salida1 = subprocess.run("builddir/42sh -c \"echo a; exit 1\"", stdout=PIPE, shell=True)
        salida1_bis = subprocess.run("echo $?", stdout=PIPE, shell=True)
        salida2 = subprocess.run("echo a; exit 1", stdout=PIPE, shell=True)
        salida2_bis = subprocess.run("echo $?", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        self.assertEqual(salida1_bis.stdout, salida2_bis.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"echo a; exit 1456\"", stdout=PIPE, shell=True)
        salida1_bis = subprocess.run("echo $?", stdout=PIPE, shell=True)
        salida2 = subprocess.run("echo a; exit 1456", stdout=PIPE, shell=True)
        salida2_bis = subprocess.run("echo $?", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        self.assertEqual(salida1_bis.stdout, salida2_bis.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"echo a; exit; echo b\"", stdout=PIPE, shell=True)
        salida1_bis = subprocess.run("echo $?", stdout=PIPE, shell=True)
        salida2 = subprocess.run("echo a; exit; echo b", stdout=PIPE, shell=True)
        salida2_bis = subprocess.run("echo $?", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        self.assertEqual(salida1_bis.stdout, salida2_bis.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"echo a; exit 56\"", stdout=PIPE, shell=True)
        salida1_bis = subprocess.run("echo $?", stdout=PIPE, shell=True)
        salida2 = subprocess.run("echo a; exit 56", stdout=PIPE, shell=True)
        salida2_bis = subprocess.run("echo $?", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        self.assertEqual(salida1_bis.stdout, salida2_bis.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"echo a; exit 654456\"", stdout=PIPE, shell=True)
        salida1_bis = subprocess.run("echo $?", stdout=PIPE, shell=True)
        salida2 = subprocess.run("echo a; exit 654456", stdout=PIPE, shell=True)
        salida2_bis = subprocess.run("echo $?", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        self.assertEqual(salida1_bis.stdout, salida2_bis.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"exit; ! echo je suis la || echo pas moi || echo pas moi non plus && echo je suis lA\"", stdout=PIPE, shell=True)
        salida1_bis = subprocess.run("echo $?", stdout=PIPE, shell=True)
        salida2 = subprocess.run("exit; ! echo je suis la || echo pas moi || echo pas moi non plus && echo je suis lA", stdout=PIPE, shell=True)
        salida2_bis = subprocess.run("echo $?", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        self.assertEqual(salida1_bis.stdout, salida2_bis.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"echo yes sur && echo SUPER; if exit; then ! echo ok || echo super; else echo wtf; fi\"", stdout=PIPE, shell=True)
        salida1_bis = subprocess.run("echo $?", stdout=PIPE, shell=True)
        salida2 = subprocess.run("echo yes sur && echo SUPER; if exit; then ! echo ok || echo super; else echo wtf; fi", stdout=PIPE, shell=True)
        salida2_bis = subprocess.run("echo $?", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        self.assertEqual(salida1_bis.stdout, salida2_bis.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"if echo ok; then if echo KO; then echo FOOBAR;exit 127;fi; elif echo ok; then echo je viens de corriger ce test 'plutot hiant non?';fi\"", stdout=PIPE, shell=True)
        salida1_bis = subprocess.run("echo $?", stdout=PIPE, shell=True)
        salida2 = subprocess.run("if echo ok; then if echo KO; then echo FOOBAR;exit 127;fi; elif echo ok; then echo on ne peut pas faire de cas derreur ? relou; fi", stdout=PIPE, shell=True)
        salida2_bis = subprocess.run("echo $?", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        self.assertEqual(salida1_bis.stdout, salida2_bis.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"if echo ok; then if echo ok; then echo FOOBAR;fi ; echo a; if echo a; then exit 6544; fi; else echo gou; fi\"", stdout=PIPE, shell=True)
        salida1_bis = subprocess.run("echo $?", stdout=PIPE, shell=True)
        salida2 = subprocess.run("if echo ok; then if echo ok; then echo FOOBAR;fi ; echo a; if echo a; then exit 6544; fi; else echo gou; fi", stdout=PIPE, shell=True)
        salida2_bis = subprocess.run("echo $?", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        self.assertEqual(salida1_bis.stdout, salida2_bis.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"if echo ok || echo YES; then until echo super; do exit; echo seulet unique fois; done; fi\"", stdout=PIPE, shell=True)
        salida1_bis = subprocess.run("echo $?", stdout=PIPE, shell=True)
        salida2 = subprocess.run("if echo ok || echo YES; then until echo super; do exit; echo seulet unique fois; done; fi", stdout=PIPE, shell=True)
        salida2_bis = subprocess.run("echo $?", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        self.assertEqual(salida1_bis.stdout, salida2_bis.stdout)

    def test_global_var(self):
        salida1 = subprocess.run("builddir/42sh -c \"var=5; echo \$var\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("var=5; echo $var", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"var=8; echo a \$var \$var \"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("var=8; echo a $var $var ", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"echo \$UID $RANDOMM \$?;\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("echo $UID $RANDOMM $?;", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"echo \$er\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("echo $er", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"if echo ok; var=8; then echo ko; fi; echo \$var\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("if echo ok; var=8; then echo ko; fi; echo $var", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"echo \$var \$test; echo OK\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("echo $var $test; echo OK", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"if var=salut; then echo \$var \$test; fi; exit 127\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("if var=salut; then echo $var $test; fi; exit 127", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"if echo ok; then echo super; var='yoooo    '; fi || if echo OK; then echo OK; else echo bah nan; fi; echo \$var\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("if echo ok; then echo super; var='yoooo    '; fi || if echo OK; then echo OK; else echo bah nan; fi; echo $var", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"echo tar.gz || echo epita; var=' je suis un test' && echo super || echo ez && echo luffy || echo jen ai marre && echo dalterne; echo \$var\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("echo tar.gz || echo epita; var=' je suis un test' && echo super || echo ez && echo luffy || echo jen ai marre && echo dalterne; echo $var", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"echo && echo  super \${nul}\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("echo && echo  super ${nul}", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"if echo franchement je ne sais plus quoi mettre; VAR='salut'; echo je continue quand meme; then if echo ok; then echo \$VAR \$var; echo ju; then echo bot; fi; fi\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("if echo franchement je ne sais plus quoi mettre; VAR='salut'; echo je continue quand meme; then if echo ok; then echo $VAR $var; echo ju; then echo bot; fi; fi", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"if if if echo ok; then echo salut;fi ; then echo je suis le deuxieme \$yo \$var \$? \$yo \$var; fi; then echo je suis le last one; fi; echo \$OOLDPWD\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("if if if echo ok; then echo salut;fi ; then echo je suis le deuxieme $yo $var $? $yo $var; fi; then echo je suis le last one; fi; echo $OOLDPWD", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"echo salut je suis ubn petit test qui devient if for tres grand then else test vraiment tres grabd; var=' wow j ne sai pas quoi dire...' if echo KO; then echo SALUT \${je ne peux pas tester avec ...}; fi; echo $var\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("echo salut je suis ubn petit test qui devient if for tres grand then else test vraiment tres grabd; var=' wow j ne sai pas quoi dire...' if echo KO; then echo SALUT ${je ne peux pas tester avec ...}; fi; echo $var", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"if echo ok; var=' je suis un test relou avec des quotes et en plus long...'; then if echo KO; then echo FOOBAR; elif echo ok; then echo je viens de corriger ce test 'plutot hiant non?';fi; echo \${var}\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("if echo ok; var=' je suis un test relou avec des quotes et en plus long...'; then if echo KO; then echo FOOBAR; elif echo ok; then echo je viens de corriger ce test 'plutot hiant non?';fi; echo ${var}", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)


    def test_export(self):
        salida1 = subprocess.run("builddir/42sh -c \"export var1=var1\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("dash -c \"export var1=var1\"", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"export var1= var1\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("dash -c \"export var1=var1\"", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"export var1=n var1\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("dash -c \"export var1=var1\"", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"export var1 =var1\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("dash -c \"export var 1=var1\"", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"export var1=var1 msdhf\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("dash -c \"export var1=var1 msdhf\"", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"export var1=Je suis un gateau de riz avec un futil et un gilet par balle, oh tiens et si je me tirais sur la tete apres tout jai un fucking gilet pare balle\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("dash -c \"export var1=Je suis un gateau de riz avec un futil et un gilet par balle, oh tiens et si je me tirais sur la tete apres tout jai un fucking gilet pare balle\"", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"export var1= Je suis un gateau de riz avec un futil et un gilet par balle, oh tiens et si je me tirais sur la tete apres tout jai un fucking gilet pare balle\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("dash -c \"export var1= Je suis un gateau de riz avec un futil et un gilet par balle, oh tiens et si je me tirais sur la tete apres tout jai un fucking gilet pare balle\"", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"export var=UN; var=DEUX\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("dash -c \"export var=UN; var=DEUX\"", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"export VARIABLE_SOLO\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("dash -c \"export VARIABLE_SOLO\"", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)
        salida1 = subprocess.run("builddir/42sh -c \"export VARIABLE PAS SOLO MAIS CEST PAS BIEN\"", stdout=PIPE, shell=True)
        salida2 = subprocess.run("dash -c \"export VARIABLE PAS SOLO MAIS CEST PAS BIEN\"", stdout=PIPE, shell=True)
        self.assertEqual(salida1.stdout, salida2.stdout)

if __name__ == '__main__':
    unittest.main()
